version: '3.8'

services:
  # PostgreSQL with pgvector extension
  database:
    image: pgvector/pgvector:pg15
    container_name: targetvision-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-targetvision}
      POSTGRES_USER: ${POSTGRES_USER:-targetvision}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-targetvision}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - targetvision-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: targetvision-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-targetvision}:${POSTGRES_PASSWORD:-changeme}@database:5432/${POSTGRES_DB:-targetvision}
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # SmugMug OAuth
      SMUGMUG_API_KEY: ${SMUGMUG_API_KEY}
      SMUGMUG_API_SECRET: ${SMUGMUG_API_SECRET}
      SMUGMUG_CALLBACK_URL: ${SMUGMUG_CALLBACK_URL:-http://localhost:3000/callback}
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost}
      # App Settings
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend:ro
      - upload_data:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - targetvision-network

  # Nginx Frontend Server
  frontend:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: targetvision-frontend
    restart: unless-stopped
    environment:
      BACKEND_URL: http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - targetvision-network

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: targetvision-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - targetvision-network

networks:
  targetvision-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local